reg<-lm(credcofin~infonavit+fovissste+banca+tasa+subsidio,data=training)
reg
summary(reg)
##Forecast
###Traer los datos a futuro de los regresores
regresor<-cbind(x1,x2,x3,x4,x5)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regf<-predict(reg,newdata = regresor)%>%
as.data.frame()%>%
rename(credcofin=1)%>%
mutate(tipo="Estimado")
##Crear la base de datos
baserg<-fortify(reg)%>%
select(credcofin)%>%
mutate(tipo="Observado")
credvivi<-rbind(basereg,regf)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2021/12/01"),
by = "month"))
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
##Se carga el archivo con los datos de producción
datos<-read.csv("C:/Users/ALIENWARE/Downloads/infonavit.csv",
encoding="latin",header=TRUE,check.names=FALSE)
#Estimar componentes----
###Se comenzará por obtener los modelos de cada componente del modelo de producción
#para posteriormente, estimar los valores a futuro
infonavit<-datos%>%
select(infonavit)%>%
##Se transforma a serie de tiempo
ts(.,start=c(2015,1),frequency=12)
#Modelo
modinfonavit = tbats(infonavit)
#Forecast
modinfonavitf= forecast(modinfonavit, h=17)
###Generar dataframe de las estimaciones
infonavitf<-fortify(modinfonavitf)
x1<-infonavitf%>%
filter(Index>="2020-08-01")%>%
select(`Point Forecast`)%>%
rename(infonavit=1)
####
#Fovissste
fovissste<-datos%>%
select(fovissste)%>%
##Se transforma a serie de tiempo
ts(.,start=c(2015,1),frequency=12)
fovissste<-fovissste%>%
##Limpiar outliers
tsclean()
##Modelo
modfovissste=auto.arima(fovissste)
#Forecast
modfovissstef=forecast(modfovissste,h=17)
###Generar dataframe de las estimaciones
fovissstef<-fortify(modfovissstef)
x2<-fovissstef%>%
filter(Index>="2020-08-01")%>%
select(`Point Forecast`)%>%
rename(fovissste=1)
###Banca
banca<-datos%>%
select(banca)%>%
##Se transforma a serie de tiempo
ts(.,start=c(2015,1),frequency=12)
modbanca = tbats(banca)
modbancaf = forecast(modbanca, h=17)
###Generar dataframe de las estimaciones
bancaf<-fortify(modbancaf)
x3<-bancaf%>%
filter(Index>="2020-08-01")%>%
select(`Point Forecast`)%>%
rename(banca=1)
###Subsidio
subsidio<-datos%>%
select(subsidio)%>%
##Se transforma a serie de tiempo
ts(.,start=c(2015,1),frequency=12)
modsubsidio = auto.arima(subsidio)
modsubsidiof=forecast(modsubsidio,h=17)
###Generar dataframe de las estimaciones
subsidiof<-fortify(modsubsidiof)
x4<-subsidiof%>%
filter(Index>="2020-08-01")%>%
select(`Point Forecast`)%>%
rename(subsidio=1)%>%
mutate(subsidio=1)
###Tasa
tasa<-datos%>%
select(tasa)%>%
##Se transforma a serie de tiempo
ts(.,start=c(2015,1),frequency=12)
modtasa = auto.arima(tasa)
modtasaf=forecast(modtasa,h=17)
tasaf<-fortify(modtasaf)
x5<-tasaf%>%
filter(Index>="2020-08-01")%>%
select(`Point Forecast`)%>%
rename(tasa=1)
###Construcción del modelo de estimación de producción----
##Covariables para modelo
xreg<-datos%>%
select(infonavit,banca,subsidio)%>%
as.matrix()
##Covariables para estimación
xregf<-cbind(x1,x3,x4)%>%
as.matrix()
training<-datos%>%
ts(.,start=c(2015,1),frequency=12)
modprod<-auto.arima(training[,"prod"],xreg=xreg)
modprod
autoplot(modprod)
modprodf<-forecast(modprod,xreg=xregf)%>%
fortify()
#Modelo de créditos individuales----
###Se cargan los datos de crédito
creddatos<-read.csv("C:/Users/ALIENWARE/Downloads/cred.csv",
encoding="latin",header=TRUE,check.names=FALSE)
xregcred<-creddatos%>%
select(infonavit,fovissste,banca,subsidio,tasa)%>%
as.matrix()
training<-creddatos%>%
ts(.,start=c(2015,1),frequency=12)
##Modelo
reg<-lm(credcofin~infonavit+fovissste+banca+tasa+subsidio,data=training)
reg
summary(reg)
##Forecast
###Traer los datos a futuro de los regresores
regresor<-cbind(x1,x2,x3,x4,x5)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regf<-predict(reg,newdata = regresor)%>%
as.data.frame()%>%
rename(credcofin=1)%>%
mutate(tipo="Estimado")
##Crear la base de datos
basereg<-fortify(reg)%>%
select(credcofin)%>%
mutate(tipo="Observado")
credvivi<-rbind(basereg,regf)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2021/12/01"),
by = "month"))
reg
summary(reg)
View(reg)
reg[["coefficients"]]
View(basereg)
View(regresos)
View(regresor)
View(regresor)
View(basereg)
View(regf)
View(regresor)
View(crecdvivi)
View(credvivi)
credvivi%>%filter(fecha>="2021-01-01")%>%summarise(sum(credcofin))
modprod
View(modprod)
modprod[["coef"]]
View(modprodf)
modprodf%>%filter(Index>="2021-01-01")%>%summarise(sum(`Point Forecast`))
View(xregf
)
arimaorder(modprod)
set.seed(3)
> x <- w <- rnorm(1000)
> for (t in 4:1000) x[t] <- w[t] + 0.6*w[t-1] + 0.4*w[t-2] + 0.3*w[t-3]
set.seed(3)
x <- w <- rnorm(1000)
for (t in 4:1000) x[t] <- w[t] + 0.6*w[t-1] + 0.4*w[t-2] + 0.3*w[t-3]
View(x)
View(w)
View(x)
training<-datos%>%
ts(.,start=c(2015,1),frequency=12)
View(training)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
regpord
regprod
summary(regprod)
autoplot(regpord)
autoplot(regprod)
checkresiduals(regpord)
checkresiduals(regprod)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
z<-fortify(regprod)
View(z)
z>%>%filter(prod,.fitted)
z%>%filter(prod,.fitted)
z%>%filter(prod,´.fitted´)
z%>%rename(est=8)%>%filter(prod,est)
z%>%filter(prod,est)
z%>%filter(prod)
regprod<-lm(prod~infonavit+fovissste+banca+subsidio,data=training)
regprod
summary(regprod)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
summary(regprod)
modprodf
View(modprod)
modprod[["coef"]]
regprod<-lm(prod~infonavit+subsidio,data=training)
summary(regprod)
regprod<-lm(prod~infonavit+subsidio,data=training)
z<-fortify(regprod)
View(z)
regprod<-lm(prod~infonavit+subsidio,data=training)
z<-fortify(regprod)
z<-z%>%
rename(est=8)
View(z)
View(z)
regprod<-lm(prod~infonavit+subsidio,data=training)
z<-fortify(regprod)
z<-z%>%
rename(est=8)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2020/07/01"),
by = "month"))
View(z)
View(z)
z%>%
ggplot()+geom_line(aes(fecha,prod))+
geom_line(aes(fecha,est))
View(z)
regprod<-lm(prod~infonavit+subsidio,data=training)
z<-fortify(regprod)
z<-z%>%
rename(est=7)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2020/07/01"),
by = "month"))
z%>%
ggplot()+geom_line(aes(fecha,prod))+
geom_line(aes(fecha,est))
checkresiduals(regprod)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
z<-fortify(regprod)
z<-z%>%
rename(est=7)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2020/07/01"),
by = "month"))
z%>%
ggplot()+geom_line(aes(fecha,prod))+
geom_line(aes(fecha,est))
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
z<-fortify(regprod)
z<-z%>%
rename(est=8)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2020/07/01"),
by = "month"))
z%>%
ggplot()+geom_line(aes(fecha,prod))+
geom_line(aes(fecha,est))
View(modprodf)
##Traer los regresores
regresor<-cbind(x1,x2,x3,x4,x5)%>%
ts(.,start=c(2020,8),frequency=12)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
##Traer los regresores
regresor<-cbind(x1,x2,x3,x4,x5)%>%
ts(.,start=c(2020,8),frequency=12)
View(regresor)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
##Traer los regresores
regresor<-cbind(x1,x3,x4)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regf<-predict(reg,newdata = regresor)
training<-datos%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
##Traer los regresores
regresor<-cbind(x1,x3,x4)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regf<-predict(regprod,newdata = regresor)
regf
##Predicción
regf<-predict(regprod,newdata = regresor)%>%
as.data.frame()
View(regf)
training<-datos%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
##Traer los regresores
regresor<-cbind(x1,x3,x4)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regprodf<-predict(regprod,newdata = regresor)%>%
as.data.frame()%>%
rename(prod=1)%>%
mutate(tipo="Estimado")
##Crear la base de datos
baseprod<-fortify(regprod)%>%
select(prod)%>%
mutate(tipo="Observado")
prodvivi<-rbind(baseprod,regprodf)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2021/12/01"),
by = "month"))
View(prodvivi)
plot(prodvivi)
plot(prodvivi$prod)
prodvivi%>%filter(fecha>="2021-01-01")%>%summarise(sum(prod))
training<-datos%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+subsidio,data=training)
##Traer los regresores
regresor<-cbind(x1,x4)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regprodf<-predict(regprod,newdata = regresor)%>%
as.data.frame()%>%
rename(prod=1)%>%
mutate(tipo="Estimado")
##Crear la base de datos
baseprod<-fortify(regprod)%>%
select(prod)%>%
mutate(tipo="Observado")
prodvivi<-rbind(baseprod,regprodf)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2021/12/01"),
by = "month"))
prodvivi%>%filter(fecha>="2021-01-01")%>%summarise(sum(prod))
View(datos)
training<-datos%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+banca+subsidio,data=training)
##Traer los regresores
regresor<-cbind(x1,x3,x4)%>%
ts(.,start=c(2020,8),frequency=12)
##Predicción
regprodf<-predict(regprod,newdata = regresor)%>%
as.data.frame()%>%
rename(prod=1)%>%
mutate(tipo="Estimado")
##Crear la base de datos
baseprod<-fortify(regprod)%>%
select(prod)%>%
mutate(tipo="Observado")
prodvivi<-rbind(baseprod,regprodf)%>%
mutate(fecha=seq(as.Date("2015/1/1"),as.Date("2021/12/01"),
by = "month"))
prodvivi%>%filter(fecha>="2021-01-01")%>%summarise(sum(prod))
prodvivi%>%filter(fecha>="2020-01-01" & fecha>="2020-12-01")%>%summarise(sum(prod))
regprod
View(regprod)
regprod[["coefficients"]]
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
View(training)
plot(training)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive
")
decomp<-decompose(training,"additive")
View(decomp)
decomp[["seasonal"]]
plot(decomp)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive")
decomp<-fortify(decomp)
View(decomp)
plot(decomp$seasonal)
write.csv(decomp"decomp.csv")
write.csv(decomp,"decomp.csv")
View(datos)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive")
decomp<-fortify(decomp)%>%
select(seasonal)
View(decomp)
training<-datos%>%
cbind(datos,decomp)
View(training)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive")
decomp<-fortify(decomp)%>%
select(seasonal)
training<-datos%>%
cbind(datos,decomp)%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+banca+subsidio+seasonal,data=training)
regprod
summary(regprod)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive")
decomp<-fortify(decomp)%>%
select(seasonal)
training<-datos%>%
cbind(datos,decomp)%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+subsidio+seasonal,data=training)
summary(regprod)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive")
decomp<-fortify(decomp)%>%
select(seasonal)
training<-datos%>%
cbind(datos,decomp)%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+seasonal,data=training)
summary(regprod)
#Modelo de producción de vivienda
##Se carga la paquetería necesaria
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, forecast,
lubridate, scales,ggfortify)
training<-datos%>%
select(prod)%>%
ts(.,start=c(2015,1),frequency=12)
decomp<-decompose(training,"additive")
decomp<-fortify(decomp)%>%
select(seasonal)
training<-datos%>%
cbind(datos,decomp)%>%
ts(.,start=c(2015,1),frequency=12)
regprod<-lm(prod~infonavit+subsidio+seasonal,data=training)
summary(regprod)
plot(regprod)
checkresiduals(regprod)
Biew(modprodf)
View(modprodf)
modprodf%>%select(`Point Forecast`)%>%filter(Index>="2021-01-01")
modprodf%>%filter(Index>="2021-01-01")%>%summarise(sum(`Point Forecast`))
write.csv(modprodf."modprodf.csv")
write.csv(modprodf,"modprodf.csv")
View(creddatos)
training<-creddatos%>%
select(credcofin)
ts(.,start=c(2015,1),frequency=12)
training<-creddatos%>%
select(credcofin)%>%
ts(.,start=c(2015,1),frequency=12)
View(training)
h<-auto.arima(training)
h
View(h)
training<-creddatos%>%
select(credcofin)%>%
ts(.,start=c(2015,1),frequency=12)
h<-auto.arima(training)
fh<-forecast(h,17)
View(h)
fh
autoplot(fh)
plot(training)
decompose(training,"additive")
training<-creddatos%>%
select(credcofin)%>%
ts(.,start=c(2015,1),frequency=12)
dec<-decompose(training, "additive")
View(dec)
plot(dec)
training<-creddatos%>%
select(credcofin)%>%
ts(.,start=c(2015,1),frequency=12)
dec<-decompose(training, "additive")
h<-auto.arima(training)
fh<-forecast(h,17)%>%
fortify()
write.csv(fh,"fh.csv")
plot(training)
