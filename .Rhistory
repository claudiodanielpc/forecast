fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
View(datos)
VIEW(datos)
View(datos)
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(const=pib)
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
ts(.,start=c(2020,2),frequency=4)
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
ts(.,start=c(2020,2),frequency=4)
datos<-datos%>%ts(.,start=c(2020,2),frequency=4)
fcast<-forecast(modelo,xreg=datos[,"pib"])
fcast
autoplot(fcast)
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
View(datos)
##Segundo modelo
##Se estimará el empleo formal en la industria de la construcción
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, gganimate,forecast,
gifski, dplyr,lubridate, scales,ggimage)
##Se importa la base de datos de RUV
##URL del archivo
#ruvurl<-"https://raw.githubusercontent.com/claudiodanielpc/vivienda/ruv/datos%20ruv.csv"
ruv<-read.csv("C:/Users/ALIENWARE/Desktop/pruebatrim.csv",
encoding="latin",header=TRUE,check.names=FALSE)
ruv<-ruv%>%
##Se transforma a serie de tiempo
ts(.,start=c(1999,1),frequency=4)
modelo<-auto.arima(ruv[,"trab"],
xreg=ruv[,"pib"])
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)
datos<-datos%>%ts(.,start=c(2020,2),frequency=4)
fcast<-forecast(modelo,xreg=datos[,"pib"])
fcast
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
##Segundo modelo
##Se estimará el empleo formal en la industria de la construcción
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, gganimate,forecast,
gifski, dplyr,lubridate, scales,ggimage)
##Se importa la base de datos de RUV
##URL del archivo
#ruvurl<-"https://raw.githubusercontent.com/claudiodanielpc/vivienda/ruv/datos%20ruv.csv"
ruv<-read.csv("C:/Users/ALIENWARE/Desktop/pruebatrim.csv",
encoding="latin",header=TRUE,check.names=FALSE)
ruv<-ruv%>%
##Se transforma a serie de tiempo
ts(.,start=c(1999,1),frequency=4)
modelo<-auto.arima(ruv[,"trab"],
xreg=ruv[,"pib"])
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
ts(.,start=c(2020,2),frequency=4)
fcast<-forecast(modelo,xreg=datos[,"pib"])
fcast
autoplot(fcast)
View(datos)
library(fortify)
df<-fortify(fcast)
library(ggfortify)
df<-fortify(fcast)
View(df)
str(df)
View(df)
View(df)
df<-df%>%
mutate(Fitted=ifelse(is.na(Fitted),`Point Forecast`,Fitted))
View(df)
plot(df$Data, col="red")
lines(df$Fitted,col="blue")
View(datos)
##Segundo modelo
##Se estimará el empleo formal en la industria de la construcción
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, gganimate,forecast,
gifski, dplyr,lubridate, scales,ggimage)
##Se importa la base de datos de RUV
##URL del archivo
#ruvurl<-"https://raw.githubusercontent.com/claudiodanielpc/vivienda/ruv/datos%20ruv.csv"
ruv<-read.csv("C:/Users/ALIENWARE/Desktop/pruebatrim.csv",
encoding="latin",header=TRUE,check.names=FALSE)
ruv<-ruv%>%
##Se transforma a serie de tiempo
ts(.,start=c(1999,1),frequency=4)
modelo<-auto.arima(ruv[,"trab"],
xreg=ruv[,"pib"])
modelo
plot(modelo$x,col="red")
lines(fitted(modelo),col="blue")
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
View(datos)
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)
View(datos)
View(datos)
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
##Obtener regresores
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
ts(.,start=c(2020,2),frequency=4)
View(datos)
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
datos[-1,]
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
slice(-1)
View(datos)
##Datos
pib<-read.csv("https://raw.githubusercontent.com/claudiodanielpc/forecast/master/pibvar.csv",
encoding="latin",header=TRUE,check.names=FALSE)%>%
mutate(trim=seq(ymd("1994/1/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
##Se crea el dataset para el modelo
pibmod<-pib%>%
###Se dejan los datos observados
filter(trim<="2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(1994,1),frequency=4)
##Se establecen el vector de regresores
xreg<-pib%>%
##Se dejan los datos que permitirán estimar hacia adelante
filter(trim>"2020.1")%>%
##Se transforma a serie de tiempo
ts(.,start=c(2020,2),frequency=4)
##Se crea el modelo
modelo<-auto.arima(pibmod[,"const"],
xreg=pibmod[,"pib"])
#Pronóstico
fcast<-forecast(modelo,xreg=xreg[,"pib"])%>%
as.data.frame()%>%
rename(const=1)%>%
select(const)%>%
mutate(trim=seq(ymd("2020/4/1"), ymd("2020/12/30"), by = "quarter"))%>%
mutate(trim=quarter(trim,with_year=T))
estima<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(const = replace(const, trim<="2020.1", NA))
estima<-rbind(estima,fcast)
estima<-estima%>%
mutate(tipo="Estimado")
##Crear la dataframe para graficarlo
datos<-pibmod%>%
as.data.frame()%>%
select(const,trim)%>%
mutate(tipo="Observado")
datos<-rbind(datos,estima)
##Segundo modelo
##Se estimará el empleo formal en la industria de la construcción
if(!require('pacman')) install.packages('pacman')
pacman::p_load(tidyverse, gganimate,forecast,
gifski, dplyr,lubridate, scales,ggimage)
##Se importa la base de datos de RUV
##URL del archivo
#ruvurl<-"https://raw.githubusercontent.com/claudiodanielpc/vivienda/ruv/datos%20ruv.csv"
ruv<-read.csv("C:/Users/ALIENWARE/Desktop/pruebatrim.csv",
encoding="latin",header=TRUE,check.names=FALSE)
ruv<-ruv%>%
##Se transforma a serie de tiempo
ts(.,start=c(1999,1),frequency=4)
modelo<-auto.arima(ruv[,"trab"],
xreg=ruv[,"pib"])
datos<-datos%>%
filter(tipo=="Estimado")%>%
filter(!is.na(const))%>%
select(const)%>%
rename(pib=const)%>%
slice(-1)%>%
##Obtener regresores
ts(.,start=c(2020,3),frequency=4)
fcast<-forecast(modelo,xreg=datos[,"pib"])
fcast
library(ggfortify)
df<-fortify(fcast)
df<-df%>%
mutate(Fitted=ifelse(is.na(Fitted),`Point Forecast`,Fitted))
plot(df$Data, col="red")
lines(df$Fitted,col="blue")
autoplot(modelo)
autoplot(modelo,bands=T)
autoplot(modelo,bands=T)
autoplot(modelo,CI=T)
autoplot(modelo,CI=T)
autoplot(modelo,CI=TRUE)
autoplot(modelo,CI=TRUE,conf.int.colour = "#0000FF")
autoplot(modelo,CI=TRUE,conf.int.colour = "#0000FF",conf.int.linetype = "dotted",
conf.int.fill = "#000000"
)
plot(forecast(modelo))
plot(forecast(fcast))
plot(modelo$x,col="red")
lines(fitted(modelo),col="blue")
plot(df$Data, col="red")
lines(df$Fitted,col="blue")
plot(modelo$x,col="red")
lines(fitted(modelo),col="blue")
plot(df$Data, col="red")
lines(df$Fitted,col="blue")
